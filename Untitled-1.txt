if (message.rfind("ROBARPLAYER:", 0) == 0) {
    playerData[event.peer].money += 100;

    std::string prefijo = "ROBARPLAYER:"; // Prefijo que estamos buscando

    // Encontrar la posición después de "ROBARPLAYER:"
    size_t pos = message.find(prefijo);
    int numero;
    if (pos != std::string::npos) {
        // Extraer el número después del prefijo
        std::string numero_str = message.substr(pos + prefijo.length());

        // Convertir el número extraído a entero
        try {
            numero = std::stoi(numero_str); // Usamos std::stoi para convertir a int
            std::cout << "Número extraído: " << numero << std::endl;
        } catch (const std::invalid_argument &e) {
            std::cerr << "Error: no se pudo convertir el número." << std::endl;
        }
    } else {
        std::cerr << "El prefijo no fue encontrado." << std::endl;
    }

    std::string roomCode = roomCodes[event.peer];
    for (ENetPeer *jugador :
         rooms[roomCode]) { // Reemplaza salaJugadores por rooms[roomCode]
        if (playerData[jugador].indexPlayer == numero) {

            playerData[jugador].money -= 100;
        }
    }

    std::string messagee = "ROBARPLAYER" + dineroRoom(roomCode);
    for (ENetPeer *jugador :
         rooms[roomCode]) { // Reemplaza salaJugadores por rooms[roomCode]
        // Excluir al jugador que envió el mensaje (comparando el puntero ENetPeer)

        sendToPeer(jugador,
                   messagee); // Enviar el mensaje a cada jugador, menos al que lo envió
    }
}